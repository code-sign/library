{"version":3,"sources":["images/work/ourwork-aritaum-img.jpg","images/work/ourwork-asiana-img.jpg","images/work/ourwork-lottehotel-img.jpg","images/work/ourwork-lottetower-img.jpg","images/work/ourwork-namuh-img.jpg","images/work/ourwork-samsunghospital-img.jpg","layout/Menu.js","layout/Home.js","component/ListCmp.js","layout/Work.js","layout/Contact.js","App.js","layout/Root.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Menu","react_default","a","createElement","NavLink","exact","to","activeClassName","React","Component","Home","ListCmp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickCheck","console","log","title","className","href","onClick","src","img","info","Work","state","listData","img1","img2","img3","img4","img5","img6","map","list","i","component_ListCmp","key","Contact","App","id","layout_Menu","Switch","Route","path","component","Root","BrowserRouter","src_App","Boolean","window","location","hostname","match","ReactDOM","render","layout_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37e1420e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ourwork-aritaum-img.9b3c16ed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ourwork-asiana-img.08aefc3e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ourwork-lottehotel-img.5ecbb0a7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ourwork-lottetower-img.58c87334.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ourwork-namuh-img.4757e691.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ourwork-samsunghospital-img.8429c3fb.jpg\";","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nclass Menu extends React.Component { \n    render(){\n        return (\n            <nav>\n                <ul>\n                    <li><NavLink exact to=\"./\" activeClassName=\"active\">Home</NavLink></li>\n                    <li><NavLink to=\"./Work\" activeClassName=\"active\">Work</NavLink></li>\n                    <li><NavLink to=\"./Contact\" activeClassName=\"active\">Contact</NavLink></li>\n                </ul>\n            </nav>\n        )\n    }\n\n};\n\nexport default Menu;","import React, { Component } from 'react';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        홈레이아웃\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\r\nimport '../css/item.scss';\r\n\r\nclass ListCmp extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    // event\r\n    clickCheck = () => {\r\n        console.log('click!', this.props.title);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"item_card\">\r\n                <a href=\"#none\" onClick={this.clickCheck}>\r\n                    <div className=\"img\">\r\n                        <img src={this.props.img}/>\r\n                    </div>\r\n                    <div className=\"cont\">\r\n                        <p className=\"tit\">\r\n                            <strong>{this.props.title}</strong>\r\n                        </p>\r\n                        <p>\r\n                            {this.props.info}\r\n                        </p>\r\n                    </div>\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListCmp;","import React, { Component } from 'react';\nimport ListCmp from '../component/ListCmp';\n\n// image import\nimport img1 from '../images/work/ourwork-aritaum-img.jpg';\nimport img2 from '../images/work/ourwork-asiana-img.jpg';\nimport img3 from '../images/work/ourwork-lottehotel-img.jpg';\nimport img4 from '../images/work/ourwork-lottetower-img.jpg';\nimport img5 from '../images/work/ourwork-namuh-img.jpg';\nimport img6 from '../images/work/ourwork-samsunghospital-img.jpg';\n\n\nclass Work extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        listData: [\n            {\n                title:'work1',\n                info:'working working1',\n                img:img1\n            },\n            {\n                title:'work2',\n                info:'working working2',\n                img:img2\n            },\n            {\n                title:'work3',\n                info:'working working3',\n                img:img3\n            },\n            {\n                title:'work4',\n                info:'working working4',\n                img:img4\n            },\n            {\n                title:'work5',\n                info:'working working5',\n                img:img5\n            },\n            {\n                title:'work6',\n                info:'working working6',\n                img:img6\n            },\n        ]\n    }\n  }\n\n\n\n  render(){\n      return (\n          <div className=\"item_wrap colbox col3\">\n              {/* ListCmp 맵핑 */}\n              {this.state.listData.map((list,i) => {\n                  return (\n                    <ListCmp title={list.title} info={list.info} img={list.img} key={i} />\n                  )\n              })}\n          </div>\n      )\n  }\n\n}\n\nexport default Work;\n","import React, { Component } from 'react';\n\nclass Contact extends Component {\n  render() {\n    return (\n      <div>\n        Contact 레이아웃\n      </div>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport './css/index.scss';\n\n// Router\nimport { Route, Switch } from 'react-router-dom';\nimport Menu from './layout/Menu';\n\n// import Home from './layout/Home';\n// import Work from './layout/Work';\n// import View from './layout/View';\n\n// 하나의 디렉토리에서 import 하기 위해 index.js 에서 export 설정 필요\nimport { Home, Work, Contact } from './layout';\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"container\">\n            <Menu />\n            <Switch>\n              <Route exact path=\"./\" component={Home} />\n              <Route path=\"./Work\" component={Work} />\n              <Route path=\"./Contact\" component={Contact} />\n            </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from '../App';\n\nconst Root = () => (\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n);\n\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './layout/Root';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}