{"version":3,"sources":["layout/Contact.jsx","App.js","layout/About.jsx","js/form.js","layout/Root.jsx","serviceWorker.js","index.js"],"names":["Contact","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allIn","cheked","isTarea","isProcess","btnNext","document","getElementsByClassName","autoSize","querySelectorAll","Array","prototype","forEach","el","i","spans","createElement","classList","add","parentNode","appendChild","window","addEventListener","fakeWid","querySelector","clientWidth","style","width","e","nextArea","target","nextElementSibling","contains","value","remove","iptEl","iptElLeng","length","valLeng","fakeIpt","textContent","fakeWidth","setState","tagName","height","scrollHeight","getElementById","entInput","_target","setTimeout","checked","react_default","a","Fragment","className","type","id","onChange","handleChange","bind","onFocus","handleFocus","onBlur","handleBlur","name","cols","rows","maxLength","htmlFor","multiple","handleCheck","disabled","Component","App","uploadBtn","filename","lastIndex","lastIndexOf","substring","files","fileList","fileTxtWrap","fileTxt","createTextNode","close","setAttribute","alert","preventDefault","Form","layout_Contact","Root","HashRouter","basename","src_App","Boolean","location","hostname","match","ReactDOM","render","layout_Root","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e1598d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport '../css/contact.scss'\n\nclass Contact extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      allIn: false,\n      cheked: false,\n      isTarea: false,\n      isProcess: false\n    };\n\n    this.btnNext = document.getElementsByClassName('action');\n  }\n\n  componentDidMount(){\n   \n    const autoSize = document.querySelectorAll('.autosize');\n    \n    Array.prototype.forEach.call(autoSize, (el, i) => {\n      const spans = document.createElement('span');\n          spans.classList.add('fake');\n      el.parentNode.appendChild(spans);\n\n      // resize 폰트사이즈 유동적으로 변할때 각각의 fakewidth로 리셋\n      window.addEventListener('resize', () => {\n        let fakeWid = el.parentNode.querySelector('.fake').clientWidth;\n        el.style.width = fakeWid + 'px';\n      });\n    });\n\n  }\n\n  handleChange(e){\n\n    if(!this.state.isProcess){\n\n      // console.log('입력중', e.target.value);\n      const nextArea = e.target.parentNode.nextElementSibling;\n\n      // 다음셀에 ipt_wrap이 계속 있을때\n      if(nextArea.classList.contains('ipt_wrap')){\n\n        if(!e.target.value == ''){\n          // console.log('입력값 있음');\n          // 입력값이 있으면 다음셀 보여주기\n          nextArea.classList.add('show');\n    \n        } else {\n          // console.log('입력값 없음');\n          // 위로 거슬러 올라가서 지울때 \n          // 다음셀에 입력된게 없다면 가리기\n          const nextVal = nextArea.querySelector('.ipt').value;\n          if(nextVal == ''){\n            nextArea.classList.remove('show');\n          }\n        }\n      }\n    }\n\n    const iptEl = document.getElementsByClassName('ipt');\n    const iptElLeng = iptEl.length;\n    let valLeng = iptElLeng;\n\n    // 입력값이 들어왔는지 check\n    Array.prototype.forEach.call(iptEl, (el, i) => {\n      // console.log(el.querySelector('.ipt').value, i);\n\n      if(el.value == ''){\n        valLeng = valLeng - 1;\n      }\n\n\n      // resize input\n      // let iptVal = el.querySelector('.ipt').value;\n      // let valLeng = iptVal.length;\n      // console.log(i + ':' + valLeng );\n      // el.querySelector('.ipt').style.width = valLeng*int + 50 + 'px';\n    });\n\n    // fake Input\n    if(e.target.classList.contains('autosize')){\n      const fakeIpt = e.target.parentNode.querySelector('.fake');\n      fakeIpt.textContent = e.target.value;\n\n      let fakeWidth = fakeIpt.clientWidth;\n      e.target.style.width = fakeWidth + 'px';\n\n      // console.log(fakeWidth);\n    };\n\n\n    // console.log(valLeng);\n    // Constructor 접근을 위해 bind(this) 필요\n\n    if(valLeng == iptElLeng){\n      this.setState({\n        allIn : true\n      });\n      // console.log('전체 값이 입력된 상태');\n    } else {\n      this.setState({\n        allIn : false\n      });\n    }\n\n    // 의뢰내용 입력시 Next 버튼 표출하기\n    if(e.target.tagName == 'TEXTAREA'){\n      // console.log('의뢰내용 입력중');\n      this.setState({\n        isTarea: true,\n        isProcess: true\n      });\n\n      // console.log(e.target.scrollHeight);\n      e.target.style.height = '100px';\n      e.target.style.height = (10 + e.target.scrollHeight) +'px';\n\n      // 체크박스영역 보여주기\n      document.getElementById('checkAgree').classList.add('show');\n\n    }\n\n  }\n\n  handleFocus(e){\n    const entInput = e.target.parentNode;\n    entInput.classList.add('focus');\n    // console.log('focus');\n\n    // fake Input\n    if(e.target.classList.contains('autosize')){\n      const fakeIpt = e.target.parentNode.querySelector('.fake');\n      fakeIpt.classList.add('focus');\n      fakeIpt.textContent = e.target.value;\n  \n      let fakeWidth = fakeIpt.clientWidth;\n      e.target.style.width = fakeWidth + 'px';\n    };\n\n    // 다음셀로 넘어간후 아무것도 입력하지 않고 올라왔을때 셀은 사라지고\n    // 입력해야 셀이 나타나므로 다음셀이 보이지 않는 문제\n    // 한글자라도 입력되어 있는 상태라면 다음셀 표출해두기    \n    const nextArea = e.target.parentNode.nextElementSibling;\n    let focusValLeng = e.target.value.length;\n\n    if(focusValLeng > 0 && nextArea.classList.contains('ipt_wrap')){\n        nextArea.classList.add('show');\n    }\n  }\n\n  handleBlur(e){\n    const entInput = e.target.parentNode;\n\n        \n    // tel number hyphen\n    // if(e.target.getAttribute('id') == 'telNum'){\n    //   let hp = e.target.value;\n    //   let newHp = hp.replace(/(^02.{0}|^01.{1}|[0-9]{3})([0-9]+)([0-9]{4})/,\"$1-$2-$3\");\n    //   console.log(newHp);\n    //   e.target.value = newHp;\n    // }\n    \n    // fake Input\n    if(e.target.classList.contains('autosize')){\n      const fakeIpt = e.target.parentNode.querySelector('.fake');\n      fakeIpt.classList.remove('focus');\n      // fakeIpt.textContent = e.target.value;\n\n      let _target = e.target;\n\n      //focus 클래스 나간 후의 값을 받아야함\n      setTimeout(() => {\n        let fakeWidth = fakeIpt.clientWidth;\n        _target.style.width = fakeWidth + 'px';\n      },50)\n    };\n\n    if(e.target.tagName == 'TEXTAREA'){\n      e.target.style.height = '100px';\n      e.target.style.height = (10 + e.target.scrollHeight)/1.36 +'px';\n    }\n\n    // console.log('떠났따', e.target.value);\n    entInput.classList.remove('focus');\n\n    \n    if(!e.target.value == ''){\n      // 떠날때 값이 있으면\n      // 입력한 셀 완료처리\n      entInput.classList.add('entered');\n    } else {\n      // 떠날때 값이 없으면 (입력하지 않고 위로 올라갈경우)\n      // 입력하던 셀 가리기\n\n      if(!this.state.isProcess){\n        entInput.classList.remove('show');\n        entInput.classList.remove('entered');\n      }\n\n      /*\n      1. 의뢰내용 입력시 Next 버튼 표출 O\n         값이 모두 입력되어야 Next 버튼 활성화 O\n         프로세스 진행완료 체크 (isProcess) O\n\n      2. 순차적인 수정이 아닐때 가운데 뻥뚫려 버리는 이슈  O\n         단계별 입력을 위한 UX이니 전체 프로세스를 거쳤는지 체크 O\n         최초 프로세스에서만 실행하기 O\n      */\n    }\n  }\n\n  handleCheck(e) {\n    if(e.target.checked){\n      this.setState({\n        checked: true\n      });\n    } else {\n      this.setState({\n        checked: false\n      });\n    }\n  }\n\n\n  render() {\n    return (\n      <React.Fragment>\n\n        <div className=\"contact_wrap\">\n          <div className=\"contact\">\n\n            <div className=\"ipt_wrap default show\">\n              회사명은\n              <input type=\"text\" id=\"txt\" className=\"ipt autosize\" onChange={this.handleChange.bind(this)} onFocus={this.handleFocus.bind(this)} onBlur={this.handleBlur.bind(this)} />\n              입니다.\n            </div>\n\n            <div className=\"ipt_wrap\">\n              이메일 주소는\n              <input type=\"text\" className=\"ipt autosize\" onChange={this.handleChange.bind(this)} onFocus={this.handleFocus.bind(this)} onBlur={this.handleBlur.bind(this)} />\n              입니다.\n            </div>\n\n            <div className=\"ipt_wrap\">\n              연락처는\n              <input type=\"text\" id=\"telNum\" className=\"ipt autosize\" onChange={this.handleChange.bind(this)} onFocus={this.handleFocus.bind(this)} onBlur={this.handleBlur.bind(this)} />\n              입니다.\n            </div>\n\n            <div className=\"ipt_wrap col2\">\n              <span>의뢰내용</span>\n              <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\" maxLength=\"198\"\n                className=\"ipt\" onChange={this.handleChange.bind(this)} onFocus={this.handleFocus.bind(this)} onBlur={this.handleBlur.bind(this)}\n              ></textarea>\n            </div>\n\n            <div className=\"ipt_wrap col2\">\n              <span>파일첨부</span>\n              <div className=\"formwrap file\">\n                  <div className=\"btnwrap\">\n                    <label className=\"border\" htmlFor=\"uploadBtn\"><span>Upload</span></label>\n                    <span className=\"txt\">첨부파일은 최대 3개까지 첨부가능합니다.</span>\n                  </div>\n\n                  <input type=\"file\" className=\"ip_file\" id=\"uploadBtn\" multiple=\"multiple\" />\n                  <div id=\"uploadList\"></div> \n              </div>\n            </div>\n\n            <div className=\"ipt_wrap\" id=\"checkAgree\">\n              <div className=\"checkwrap\">\n                <input type=\"checkbox\" id=\"chk1\" className=\"ipt\" onChange={this.handleCheck.bind(this)} />\n                <label htmlFor=\"chk1\"><span>개인정보 수집·이용에 동의</span></label>\n              </div>\n\n            </div>\n\n          </div>\n\n          {this.state.isTarea ? \n            // <button className={`${this.state.allIn && this.state.checked ? 'color' : ''} action`} disabled>보내기</button>\n            <button className=\"action\" disabled={!this.state.allIn || !this.state.checked}>보내기</button>\n            : null\n          }\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport './css/index.scss';\n\nimport Form from './js/form.js';\n\nimport Contact from './layout/Contact';\nimport About from './layout/About';\nclass App extends Component {\n\n  componentDidMount(){\n    // 공통으로 쓸 js 를 이렇게 불러도 되는지\n    Form();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n         <Contact />\n         {/* <About /> */}\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport AOS from 'aos';\n\nimport '../../node_modules/aos/dist/aos.css'\nimport '../css/about.scss'\n\nimport { Tween, Timeline } from 'react-gsap';\n\nclass About extends Component {\n\n  componentDidMount(){\n    AOS.init({\n      duration : 1000\n    });\n  }\n\n  render() {\n\n    return (\n      <React.Fragment>\n\n        <div className=\"box\" data-aos=\"fade-up\">\n          box1\n        </div>\n\n        <div className=\"box\" data-aos=\"fade-left\" data-aos-offset=\"400\">\n          box2\n        </div>\n      \n        <div className=\"stepbox\">\n          <div className=\"box\" data-aos=\"fade-up\" data-aos-delay=\"0\">\n            box3\n          </div>\n          <div className=\"box\" data-aos=\"fade-up\" data-aos-delay=\"100\">\n            box3\n          </div>\n          <div className=\"box\" data-aos=\"fade-up\" data-aos-delay=\"200\">\n            box3\n          </div>\n        </div>\n      \n        <div className=\"box\" data-aos=\"fade-up-right\">\n          box\n        </div>\n\n        <div className=\"box\" data-aos=\"fade-up-left\">\n          box\n        </div>\n              \n      </React.Fragment>\n    );\n  }\n}\n\nexport default About;\n","/****************************/\r\n/* form                     */\r\n/****************************/\r\n\r\nexport default function Form(){\r\n\r\n    /****************************/\r\n    /* Checkbox - focus         */\r\n    /****************************/\r\n    // const checkwrap = document.querySelectorAll('.checkwrap');\r\n\r\n    // Array.prototype.forEach.call(checkwrap, (el, i) => {\r\n    //     const checkBox = el.querySelector('input[type=checkbox');\r\n    //     checkBox.addEventListener('focus', (e) => {\r\n    //     e.target.parentNode.classList.add('focus');\r\n    //     });\r\n\r\n    //     checkBox.addEventListener('blur', (e) => {\r\n    //         e.target.parentNode.classList.remove('focus');\r\n    //     });\r\n    // });\r\n\r\n\r\n    /****************************/\r\n    /* Input - File Upload      */\r\n    /****************************/\r\n    const uploadBtn = document.getElementById('uploadBtn');\r\n    uploadBtn.addEventListener('change', (e) =>{\r\n        \r\n        let filename = e.target.value;\r\n        let lastIndex = filename.lastIndexOf(\"\\\\\");\r\n        if (lastIndex >= 0) {\r\n            filename = filename.substring(lastIndex + 1);\r\n        }\r\n        let files = e.target.files;\r\n\r\n        // console.log(files.length);\r\n\r\n        // 업로드파일 제한 3개\r\n        if(files.length < 4){\r\n            const uploadLeng = document.querySelector('#uploadList').querySelectorAll('.list').length;\r\n\r\n            // 추가 업로드시 length 체크\r\n            if(uploadLeng + files.length < 4){\r\n                for (let i = 0; i < files.length; i++) {\r\n        \r\n                    const fileList = document.createElement('div');\r\n                    const fileTxtWrap = document.createElement('span');\r\n                    const fileTxt = document.createTextNode(files[i].name);\r\n                    const close = document.createElement('a');\r\n        \r\n                    fileList.appendChild(fileTxtWrap);\r\n                    fileList.classList.add('list');\r\n                    fileTxtWrap.appendChild(fileTxt);\r\n                    fileList.appendChild(close);\r\n                    close.setAttribute('href','#none');\r\n                    close.classList.add('close');\r\n        \r\n                    document.getElementById('uploadList').appendChild(fileList);\r\n                }\r\n            } else {\r\n                // console.log('over list');\r\n                alert('첨부파일은 최대 3개까지 첨부가능합니다.');\r\n                e.preventDefault();\r\n            }\r\n    \r\n        } else {\r\n            // console.log('over select');\r\n            alert('첨부파일은 최대 3개까지 첨부가능합니다.');\r\n            e.preventDefault();\r\n        }\r\n        \r\n        const close = document.querySelectorAll('.close');\r\n        Array.prototype.forEach.call(close, (el, i) => {\r\n            el.addEventListener('click', (e) => {\r\n                e.target.parentNode.remove();\r\n            });\r\n        });\r\n    });\r\n\r\n\r\n    // 이미 업로드 갯수가 3개 일때\r\n    uploadBtn.addEventListener('click', (e) =>{\r\n        const uploadLeng = document.querySelector('#uploadList').querySelectorAll('.list').length;\r\n        // console.log(uploadLeng);\r\n        if(uploadLeng == 3){\r\n            // console.log('full');\r\n            \r\n            alert('첨부파일은 최대 3개까지 첨부가능합니다.');\r\n            e.preventDefault();\r\n        }\r\n    });\r\n\r\n\r\n}","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport App from '../App';\n\nconst Root = () => (\n    <HashRouter basename='/'>\n        <App/>\n    </HashRouter>\n);\n\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'core-js/es6/map'; \nimport 'core-js/es6/set'; \n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './layout/Root';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}